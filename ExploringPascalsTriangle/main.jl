#=
Approach:

Notice that calculating the number of elements that are not divisible by 7 is
equivalent to solving the problem of finding how many elements are divisible by 7.
To solve this problem we will calculate Pascals' triangle mod 7. The file output.txt
presents the first 7^4 lines of the Pascal triangle mod 7, where "." represents
a non-zero element and the "_" represents a zero number. A fractal structure is
evident in the result. This can be explained by noticing a few facts:

- If n is a power of 7 then the whole line is 0 mod 7 except the 1s at the ends.
This appears cleatly when you express an element as:
(n choose k) = n * (n - 1) * ... * (n - k + 1) / (1 * 2 * ... * k)
- If the two elements above are multiples of 7, then the element on the next line,
that is generated by adding the above elements, is a multiple of 7.
- The first 7 lines of the pascal triangle have no elements divisible by 7.
- Because 7 is prime, it's multiplication ring is all numbers in the addition ring
modulo 7, except 0.

These facts together imply that the 7 first lines of the Pascal triangle will
reappear at regular intervals, surrounded by a ton of inverted triangles filled
with zeros. In fact the 7 first lines appear also, but spaced out by powers of 7,
giving the result a fractal structure.

Therefore, the number of elements that are 0 mod 7 in the first 7^n lines is:

s1 = 0
tn = (7^(n-1) - 1) * 7^(n-1) / 2
sn = tn * 21 + sn-1 * 28

This recurrence results from the fact that there are 28 elements in the first 7
lines of the Pascal Triangle. And therefore 21 zero-filled inverted triangles
can be fit in between these elements.

The result follows from carefully counting the zeros and discounting them from
the number of elements in the first 10^9 lines, i.e. 10^9 * (10^9 + 1) / 2.
=#

using Printf

start = time()

lines = BigInt(10)^9
total = div(lines * (lines + BigInt(1)), BigInt(2))

result = BigInt(0)
mult = BigInt(1)
while lines > 0
    global result
    global mult
    global lines
    n = BigInt(floor(log(7, lines)))
    pwr = BigInt(7)^n
    dvr = div(lines, pwr)
    rem = lines % pwr
    s = 0
    for k in 1:n
        t = div((BigInt(7)^k - 1) * BigInt(7)^k, 2)
        if k < n
            s = t * 21 + s * 28
        else
            s = t * div((dvr - 1) * dvr, 2) + s * div(dvr * (dvr + 1), 2)
        end
    end
    t = div((pwr - 1) * pwr, 2)
    d = div((pwr - rem - 1) * (pwr - rem), 2)
    s = s + dvr * (t - d)
    result = result + mult * s
    lines = rem
    mult = mult * (dvr + 1)
end

result = total - result
println(result)

elapsed = time() - start
@printf("Took: %.4f secs\n", elapsed)
